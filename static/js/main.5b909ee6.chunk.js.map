{"version":3,"sources":["components/picture-of-the-day/ImagePreview.js","components/picture-of-the-day/ArticleText.js","components/picture-of-the-day/ImageArticle.js","components/picture-of-the-day/NavControls.js","helpers/dateFormat.js","components/picture-of-the-day/PictureOfTheDay.js","App.js","serviceWorker.js","index.js"],"names":["ImagePreview","title","hdurl","url","newTab","className","href","target","src","alt","loader","type","color","height","width","ArticleText","subTitle","text","ImageArticle","copyright","articleText","hdImageUrl","imageUrl","NavControls","forwardCallback","backCallback","latestCallback","selectDateCallback","forwardVisible","date","visibleStyle","display","hiddenStyle","calendarProps","defaultValue","value","minDate","Date","maxDate","onChange","useState","calendarVisible","setCalendarVisible","Fragment","onClick","style","shortMonthNames","GetDateString","dateObject","monthString","getMonth","day","getDate","toString","year","getFullYear","PictureOfTheDay","apiUrl","apiKey","data","setData","currentDate","setCurrentDate","useEffect","a","yearString","d","padStart","dayString","dateString","fetchUrl","fetch","response","json","fetchData","explanation","newDate","PictureOfTheDayView","useParams","month","parseInt","error","App","basename","process","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b909ee6.chunk.js","sourcesContent":["import React from 'react';\r\nimport Img from 'react-image';\r\nimport Loader from 'react-loader-spinner';\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\n\r\nimport './ImagePreview.scss';\r\n\r\nfunction ImagePreview({title, hdurl, url, newTab=true}) {\r\n    return (\r\n        <div className=\"image-preview\">\r\n            <a href={hdurl} target={newTab ? \"_blank\" : \"\"}>\r\n                <Img \r\n                    className=\"image\" \r\n                    src={url} \r\n                    alt={title}\r\n                    loader={(<Loader type=\"RevolvingDot\" color=\"#00BFFF\" height={100} width={100}/>)}\r\n                >\r\n                </Img>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImagePreview;","import React from 'react';\r\nimport './ArticleText.scss';\r\n\r\nfunction ArticleText({title, subTitle, text}) {\r\n    return (\r\n        <div className = \"article-text\">\r\n            <h2>{subTitle}</h2>\r\n            <h1>{title}</h1>\r\n            <p>{text}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ArticleText;","import React from 'react';\r\nimport ImagePreview from './ImagePreview';\r\nimport ArticleText from './ArticleText';\r\n\r\nfunction ImageArticle({copyright, articleText, hdImageUrl, title, imageUrl, subTitle}) {\r\n    return (\r\n        <article>\r\n            <ImagePreview \r\n                title={title}\r\n                hdurl={hdImageUrl}\r\n                url={imageUrl}>\r\n            </ImagePreview>\r\n            <ArticleText\r\n                title={title}\r\n                subTitle={subTitle}\r\n                text={articleText}\r\n            >\r\n            </ArticleText>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default ImageArticle;","import React, {useState} from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport './NavControls.scss';\r\n\r\nfunction NavControls({forwardCallback, backCallback, latestCallback, selectDateCallback, forwardVisible=false, date}) {\r\n    \r\n    const visibleStyle = {display: 'block'};\r\n    const hiddenStyle = {display: 'none'};\r\n    \r\n    const calendarProps = {\r\n        defaultValue: date,\r\n        value: date,\r\n        minDate: new Date(1995, 5, 16),\r\n        maxDate: new Date(),\r\n        onChange: selectDateCallback\r\n    };\r\n\r\n    const toggleCalendar = () => {\r\n        setCalendarVisible(!calendarVisible);\r\n    };\r\n\r\n    const [calendarVisible, setCalendarVisible] = useState(false);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <button type=\"button\" className=\"button-back\" onClick={backCallback}>Previous</button>\r\n            <div style={forwardVisible ? visibleStyle : hiddenStyle}>\r\n                <button type=\"button\" className=\"button-forward\" onClick={forwardCallback}>Next</button>\r\n            </div>\r\n            <button type=\"button\" className=\"button-latest\" onClick={latestCallback}>Latest</button>\r\n            <button type=\"button\" className=\"button-calendar\" onClick={toggleCalendar}>[]</button>\r\n            <div style={calendarVisible ? visibleStyle : hiddenStyle}>\r\n                <Calendar {...calendarProps}/>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default NavControls;","const shortMonthNames = ['Jan', 'Feb', 'Mar', \r\n                    'Apr', 'May', 'Jun', \r\n                    'Jul', 'Aug', 'Sep', \r\n                    'Oct', 'Nov', 'Dec'];\r\n\r\nfunction GetDateString(dateObject) {\r\n    const monthString = shortMonthNames[dateObject.getMonth()];\r\n    const day = dateObject.getDate().toString();\r\n    const year = dateObject.getFullYear().toString();\r\n    return `${monthString} ${day}, ${year}`;\r\n}\r\n\r\nexport default GetDateString;","import React, { useState, useEffect } from 'react';\r\nimport ImageArticle from './ImageArticle';\r\nimport NavControls from './NavControls';\r\nimport GetDateString from '../../helpers/dateFormat';\r\n\r\nimport './PictureOfTheDay.scss';\r\n\r\nfunction PictureOfTheDay({apiUrl, apiKey, date}) {\r\n\r\n    const isLatestDay = () => {\r\n        return currentDate.getDate() === new Date().getDate();\r\n    }\r\n\r\n    const previousDay = () => {\r\n        const newDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - 1);\r\n        setCurrentDate(newDate);\r\n    }\r\n\r\n    const nextDay = () => {\r\n        const newDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1);\r\n        setCurrentDate(newDate);\r\n    }\r\n\r\n    const latestDay = () => {\r\n        const newDate = new Date();\r\n        setCurrentDate(newDate);\r\n    }\r\n\r\n    const selectDate = (newDate) => {\r\n        setCurrentDate(newDate);\r\n    }\r\n\r\n    const [data, setData] = useState({});\r\n    const [currentDate, setCurrentDate] = useState(date);\r\n    \r\n    useEffect(() => {\r\n\r\n        async function fetchData() {\r\n            const d = currentDate;\r\n            const yearString = d.getFullYear().toString().padStart(4, '0');\r\n            const monthString = (d.getMonth() + 1).toString().padStart(2, '0');\r\n            const dayString = d.getDate().toString().padStart(2, '0');\r\n            const dateString = `${yearString}-${monthString}-${dayString}`;\r\n            const fetchUrl = `${apiUrl}?api_key=${apiKey}&date=${dateString}`;\r\n            const response = await fetch(fetchUrl);\r\n            const json = await response.json();\r\n            setData(json);\r\n        }\r\n\r\n        fetchData();\r\n\r\n    }, [apiUrl, apiKey, date, currentDate]);\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <ImageArticle \r\n                copyright={data.copyright}\r\n                articleText={data.explanation}\r\n                hdImageUrl={data.hdurl}\r\n                imageUrl={data.url}\r\n                title={data.title}\r\n                subTitle={GetDateString(currentDate)}\r\n            >\r\n            </ImageArticle>\r\n            <NavControls\r\n                forwardCallback={nextDay}\r\n                backCallback={previousDay}\r\n                latestCallback={latestDay}\r\n                selectDateCallback={selectDate}\r\n                forwardVisible={!isLatestDay()}\r\n                date={currentDate}\r\n            ></NavControls>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default PictureOfTheDay;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, useParams } from 'react-router-dom';\nimport './App.css';\n\nimport PictureOfTheDay from './components/picture-of-the-day/PictureOfTheDay.js';\n\nfunction PictureOfTheDayView() {\n\n  const API_URL = 'https://api.nasa.gov/planetary/apod';\n  const API_KEY = 'DEMO_KEY';\n\n  const { year, month, day } = useParams();\n  \n  const getDate = () => {\n    try {\n      return year && month && day ? new Date(year, parseInt(month) - 1, day) : new Date();\n    } catch (error) {\n      return new Date();\n    }\n  }\n\n  return (\n    <PictureOfTheDay\n      apiUrl={API_URL}\n      apiKey={API_KEY}\n      date={getDate()}\n    ></PictureOfTheDay>\n  )\n}\n\nfunction App() {\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path={\"/:year?/:month?/:day?\"} render={ () => (\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <PictureOfTheDayView/>\n            </header>\n          </div>\n        )} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}